<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yang.mapper.EmployeeMapper">
  <resultMap id="BaseResultMap" type="com.yang.domain.Employee">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="hiredate" jdbcType="TIMESTAMP" property="hiredate" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="state" jdbcType="BIT" property="state" />
    <result column="admin" jdbcType="BIT" property="admin" />
    <association property="department" javaType="com.yang.domain.Department" columnPrefix="d_">
      <result property="id" column="id" />
      <result property="name" column="name" />
    </association>
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from employee
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <!--删除员工与角色关系-->
  <delete id="deleteRoleRel">
    delete from `employee_role_rel` where employee_id =#{id}
  </delete>
  <insert id="insert" parameterType="com.yang.domain.Employee" useGeneratedKeys="true" keyProperty="id">
    insert into employee (id, username, password, 
      hiredate, phone, email, 
      state, admin, dep_id)
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{hiredate}, #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR},
      #{state}, #{admin,jdbcType=BIT}, #{department.id,jdbcType=INTEGER})
  </insert>
    <insert id="insertRoleRel">
      insert into `employee_role_rel`(employee_id, role_id) values (#{employee_id}, #{role_id})
    </insert>
  <!--通过excel插入-->
  <insert id="insertInExcel" parameterType="com.yang.domain.Employee">
    insert into employee (username, password,
      hiredate, phone, email,
      state, admin)
    values(#{username}, #{password}, #{hiredate}, #{phone}, #{email}, #{state}, #{admin})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.yang.domain.Employee">
    update employee
    set username = #{username,jdbcType=VARCHAR},
      hiredate = #{hiredate,jdbcType=TIMESTAMP},
      phone = #{phone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      admin = #{admin,jdbcType=BIT},
      dep_id = #{department.id,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="changeState">
    update employee set state = false where id=#{id}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select id, username, password, hiredate, phone, email, state, admin, dep_id
    from employee
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select e.id, e.username, e.password, e.hiredate, e.phone, e.email, e.state, e.admin, d.id as d_id, d.`name` as d_name
    from employee as e
    left join  department as d
    on e.dep_id = d.id
    <where>
      <if test="keyword != null and keyword != ''">
        and e.username like concat('%',#{keyword},'%')
        or e.phone like concat('%', #{keyword}, '%')
        or e.email like concat('%', #{keyword}, '%')
      </if>
    </where>
  </select>
  <!--根据员工姓名获取员工-->
    <select id="getEmployeeByName" resultType="com.yang.domain.Employee">
      select * from `employee` where username =#{username}
    </select>
  <!--查询该员工所拥有的角色集合-->
    <select id="getRoleByEmployeeId" resultType="java.lang.String">
      SELECT `role`.number FROM `employee_role_rel`
      LEFT JOIN `role` ON `employee_role_rel`.role_id = `role`.id
      WHERE employee_id = #{id}
    </select>
  <!--查询该员工所有的权限集合-->
  <select id="getPermissionByEmployeeId" resultType="java.lang.String">
        SELECT DISTINCT `permission`.resource from `role_permission_rel`
        LEFT JOIN `permission` on `role_permission_rel`.permission_id = `permission`.id
        WHERE `role_permission_rel`.role_id IN(SELECT role_id FROM `employee_role_rel` WHERE employee_id = #{id})
  </select>
</mapper>