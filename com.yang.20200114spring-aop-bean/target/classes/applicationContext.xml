<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--配置我们的通知对象-->
    <bean name="advice" class="yang.Transaction.Transaction" />

    <!--配置我们饿对象-->
    <bean name="userService" class="yang.UserService.Impl.UserServiceImpl" />

    <!--织入目标对象-->
    <aop:config>
        <!--
            切入点顾名思义就是从哪里切入程序的
            设置切入点execution一共有四个参数
            第一个：修饰符，可忽略不写
            第二个：返回值类型，填写*代表所有
            第三个：全限定类名，一般写到类之后的*代表所有方法
            第四个：(..)参数类型，这个符号代表所有类型
        -->
        <aop:pointcut id="pointcut" expression="execution(* yang.UserService.*.*ServiceImpl.*(..))" />
        <!--设置切入的方法， 增强类使用ref注入我们定义的advice-->
        <aop:aspect ref="advice">
            <!--前置增强，在定义的pointcut点切入-->
            <aop:before method="before" pointcut-ref="pointcut"/>
            <!--后置增强，在没有错误的情况下，在定义的pointcut点切入-->
            <aop:after-returning method="afterReturning" pointcut-ref="pointcut" />
            <!--环绕增强，会完整的执行我们既定的流程，在定义的pointcut点切入-->
            <aop:around method="aroundMethod" pointcut-ref="pointcut" />
            <!--出现错误增强，在定义的pointcut点切入-->
            <aop:after-throwing method="afterException" pointcut-ref="pointcut" />
            <!--最终增强，不管有没有错误，最终都会走这个方法，在定义的pointcut点切入-->
            <aop:after method="after" pointcut-ref="pointcut" />
        </aop:aspect>
    </aop:config>

</beans>